{"version":3,"sources":["components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","components/DonutChart/DonutChart.module.css","components/DatePicker/DatePicker.module.css","App.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","components/DatePicker/DatePicker.jsx","components/MyTable/MyTable.jsx","App.js","serviceWorker.js","index.js","components/MyTable/MyTable.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","xs","md","cx","gridItem","Card","card","CardActionArea","CardContent","cardContent","Typography","color","gutterBottom","variant","paddingX","start","end","value","duration","separator","component","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","fetchDateData","d","getDate","m","getMonth","y","getFullYear","modifiedDate","merge","defaults","scale","gridLines","drawOnChartArea","Charts","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","scales","yAxes","ticks","callback","index","xAxes","autoSkip","autoSkipPadding","maxRotation","minRotation","borderColor","fill","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","BootstrapInput","withStyles","theme","root","marginTop","input","borderRadius","position","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","boxShadow","InputBase","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","InputLabel","id","Select","labelId","defaultValue","onChange","e","target","displayEmpty","renderValue","selected","length","MenuItem","i","key","DatePicker","handleDateChange","someDaysAgo","setDate","datePickerContainer","align","utils","DateFnsUtils","margin","format","minDate","maxDate","KeyboardButtonProps","MyTable","dateData","TableContainer","Paper","tableContainer","Table","table","aria-label","TableHead","TableRow","TableCell","TableBody","row","countryRegion","provinceState","App","state","setState","fetchedData","this","CssBaseline","AppBar","Toolbar","noWrap","CountryPicker","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37efd99f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1tDim\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1nbxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DonutChart_container__GXjeX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"datePickerContainer\":\"DatePicker_datePickerContainer__Y67KC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3z3Wa\",\"image\":\"App_image__2RHdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3qmyy\",\"gridItem\":\"Cards_gridItem__2icu1\",\"card\":\"Cards_card__3JiJq\",\"cardContent\":\"Cards_cardContent__1wzFT\",\"confirmed\":\"Cards_confirmed__1WJPy\",\"recovered\":\"Cards_recovered__1KXLT\",\"deaths\":\"Cards_deaths__nNxDt\",\"paddingX\":\"Cards_paddingX__2hIfn\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid, CardActionArea } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={10} justify=\"center\">\r\n                <Grid item xs={12} md={4} className={cx(styles.gridItem)}>\r\n                    <Card className={cx(styles.card)}>\r\n                        <CardActionArea>\r\n                            <CardContent className={cx(styles.cardContent)}>\r\n                                <Typography color=\"textSecondary\" gutterBottom className={cx(styles.confirmed)}>\r\n                                    Confirmed\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" className={cx(styles.paddingX)}>\r\n                                    <CountUp start={0} end={confirmed.value} duration={1} separator=\",\"/>\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={cx(styles.paddingX)}>\r\n                                Number of active cases upto {new Date(lastUpdate).toDateString()}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={4} className={cx(styles.gridItem)}>\r\n                    <Card className={cx(styles.card)}>\r\n                        <CardActionArea>\r\n                            <CardContent className={cx(styles.cardContent)}>\r\n                                <Typography color=\"textSecondary\" gutterBottom className={cx(styles.recovered)}>\r\n                                    Recovered\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" className={cx(styles.paddingX)}>\r\n                                    <CountUp start={0} end={recovered.value} duration={1} separator=\",\"/>\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={cx(styles.paddingX)}>\r\n                                Number of recoveries upto {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={4} className={cx(styles.gridItem)}>\r\n                    <Card className={cx(styles.card)}>\r\n                        <CardActionArea>\r\n                            <CardContent className={cx(styles.cardContent)}>\r\n                                <Typography color=\"textSecondary\" gutterBottom className={cx(styles.deaths)}>\r\n                                    Deaths\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" className={cx(styles.paddingX)}>\r\n                                    <CountUp start={0} end={deaths.value} duration={1} separator=\",\"/>\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={cx(styles.paddingX)}>\r\n                                    Number of deaths upto {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDateWise = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDateData = async (date) => {\r\n  let changeableUrl = url;\r\n\r\n  if (date) {\r\n    let d = date.getDate();\r\n    let m = date.getMonth() + 1;\r\n    let y = date.getFullYear();\r\n    let modifiedDate = '' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d) + '-' + y;\r\n\r\n    changeableUrl = `${url}/daily/${modifiedDate}`;\r\n  }\r\n\r\n  try {\r\n    const { data } = await axios.get(changeableUrl);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar, defaults } from 'react-chartjs-2';\r\nimport { Card } from '@material-ui/core';\r\nimport { merge } from 'lodash';\r\nimport { fetchDailyData } from '../../api';\r\nimport styles from './Charts.module.css';\r\n\r\nmerge(defaults, {\r\n  scale: {\r\n    gridLines: {\r\n      drawOnChartArea: false,\r\n     },\r\n  },\r\n});\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['#3f51b5cc', '#29a729cc', '#dd2138cc'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  var options = {\r\n    scales: {\r\n        yAxes: [\r\n            {\r\n                ticks: {\r\n                    callback: function(label, index, labels) {\r\n                      if(label >= 100000){\r\n                        return label/100000+'L'\r\n                      }  \r\n                      return label/1000+'k';\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        xAxes: [{\r\n          ticks: {\r\n              autoSkip: true,\r\n              autoSkipPadding: 20,\r\n              maxRotation: 90,\r\n              minRotation: 90\r\n          }\r\n      }]\r\n    }\r\n}\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line options={options}\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3f51b5cc',\r\n            backgroundColor: '#3f51b5cc',\r\n            fill: false,\r\n            pointBorderColor: '#3f51b5cc',\r\n            pointBackgroundColor: '#3f51b5cc',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: '#3f51b5cc',\r\n            pointHoverBorderColor: '#3f51b5cc',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#dd2138cc',\r\n            backgroundColor: '#dd2138cc',\r\n            fill: false,\r\n            pointBorderColor: '#dd2138cc',\r\n            pointBackgroundColor: '#dd2138cc',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: '#dd2138cc',\r\n            pointHoverBorderColor: '#dd2138cc',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n          }\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n\r\n  return (\r\n    <Card className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Charts;","import React, { useState, useEffect } from 'react';\r\nimport { FormControl, InputLabel, MenuItem, Select, InputBase } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n  root: {\r\n    'label + &': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  input: {\r\n    borderRadius: 4,\r\n    position: 'relative',\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '1px solid #ced4da',\r\n    fontSize: 16,\r\n    padding: '10px 26px 10px 12px',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n    '&:focus': {\r\n      borderRadius: 4,\r\n      borderColor: '#80bdff',\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n    },\r\n  },\r\n}))(InputBase);\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <InputLabel id=\"countries-select-label\"> Select Country</InputLabel>\r\n      <Select\r\n      labelId=\"countries-select-label\"\r\n      defaultValue=\"\"\r\n      onChange={(e) => handleCountryChange(e.target.value)} input={<BootstrapInput/>}\r\n      displayEmpty\r\n      renderValue={(selected) => {\r\n        if (selected.length === 0) {\r\n          return <em>All Countries</em>;\r\n        }\r\n        return selected;\r\n      }}\r\n      >\r\n        <MenuItem value=\"\">All Countries</MenuItem >\r\n        {countries.map((country, i) => <MenuItem key={i} value={country}>{country}</MenuItem>)}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","import 'date-fns';\r\nimport React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport styles from './DatePicker.module.css';\r\n\r\nconst DatePicker = ({ date, handleDateChange }) => {\r\n  // const [selectedDate, setSelectedDate] = React.useState(new Date('2020-02-14T21:11:54'));\r\n  let someDaysAgo = new Date()\r\n  someDaysAgo = someDaysAgo.setDate(someDaysAgo.getDate() - 2)\r\n  return (\r\n    <div className={styles.datePickerContainer}>\r\n      <Typography align='center'>Select Date For Viewing Historical Data</Typography>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Grid container justify=\"space-around\">\r\n          <KeyboardDatePicker\r\n            margin=\"normal\"\r\n            id=\"date-picker-dialog\"\r\n            label=\"\"\r\n            format=\"MM-dd-yyyy\"\r\n            value={date}\r\n            onChange={handleDateChange}\r\n            minDate={new Date('2020-01-22T21:11:54')}\r\n            maxDate={someDaysAgo}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n        </Grid>\r\n      </MuiPickersUtilsProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DatePicker;\r\n","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from './MyTable.module.css';\r\n\r\nconst MyTable = ({ date, dateData }) => {\r\n\r\n  if (dateData.length === 0) {\r\n    return (\r\n      <TableContainer component={Paper} className={styles.tableContainer}>\r\n        <Table className={styles.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\">Country</TableCell>\r\n              <TableCell align=\"center\">Province/State</TableCell>\r\n              <TableCell align=\"center\">Confirmed</TableCell>\r\n              <TableCell align=\"center\">Recovered</TableCell>\r\n              <TableCell align=\"center\">Deaths</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n              <TableRow>\r\n                <TableCell align=\"center\">No Data</TableCell>\r\n                <TableCell align=\"center\">No Data</TableCell>\r\n                <TableCell align=\"center\">No Data</TableCell>\r\n                <TableCell align=\"center\">No Data</TableCell>\r\n                <TableCell align=\"center\">No Data</TableCell>\r\n              </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TableContainer component={Paper} className={styles.tableContainer}>\r\n      <Table className={styles.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\">Country</TableCell>\r\n            <TableCell align=\"center\">Province/State</TableCell>\r\n            <TableCell align=\"center\">Confirmed</TableCell>\r\n            <TableCell align=\"center\">Recovered</TableCell>\r\n            <TableCell align=\"center\">Deaths</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {dateData.map((row, i) => (\r\n            <TableRow key={i}>\r\n              <TableCell align=\"center\">{row.countryRegion}</TableCell>\r\n              <TableCell align=\"center\">{row.provinceState}</TableCell>\r\n              <TableCell align=\"center\">{row.confirmed}</TableCell>\r\n              <TableCell align=\"center\">{row.recovered}</TableCell>\r\n              <TableCell align=\"center\">{row.deaths}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nexport default MyTable;","import React from 'react';\nimport { Cards, Charts, CountryPicker, DonutChart , DatePicker, MyTable} from './components';\nimport styles from './App.module.css';\nimport { fetchData, fetchDateData } from './api';\n\nimport { CssBaseline, AppBar, Toolbar, Typography} from '@material-ui/core';\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: '',\n    date: new Date('2020-02-14T21:11:54'),\n    dateData: [],\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  }\n\n  handleDateChange = async (date) => {\n    let dateData = await fetchDateData(date);\n\n    this.setState({ date, dateData: dateData });\n  };\n\n  render() {\n    const { data, country, date, dateData } = this.state; \n\n    // console.log(dateData)\n\n    return (\n      <div>\n        <CssBaseline />\n        <AppBar>\n          <Toolbar>\n            <Typography variant=\"h6\" noWrap>\n              Covid-19 Tracker\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <main>\n          <div className={styles.container}>\n            <Cards data={data} />\n            {/* <DonutChart data={data} /> */}\n            <CountryPicker handleCountryChange={this.handleCountryChange} />\n            <Charts data={data} country={country} />\n            <DatePicker date={date} handleDateChange={this.handleDateChange}/>\n            <MyTable date={date} dateData={dateData}/>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"MyTable_table__3uPMz\",\"tableContainer\":\"MyTable_tableContainer__3V0H_\"};"],"sourceRoot":""}